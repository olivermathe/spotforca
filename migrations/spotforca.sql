-- MySQL Script generated by MySQL Workbench
-- qui 03 out 2019 22:43:14 -03
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema spotforca
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema spotforca
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `spotforca` DEFAULT CHARACTER SET utf8 ;
USE `spotforca` ;

-- -----------------------------------------------------
-- Table `spotforca`.`categories`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spotforca`.`categories` ;

CREATE TABLE IF NOT EXISTS `spotforca`.`categories` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `id_UNIQUE` ON `spotforca`.`categories` (`id` ASC);


-- -----------------------------------------------------
-- Table `spotforca`.`words`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spotforca`.`words` ;

CREATE TABLE IF NOT EXISTS `spotforca`.`words` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NULL,
  `categories_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id`, `categories_id`),
  CONSTRAINT `fk_words_categories`
    FOREIGN KEY (`categories_id`)
    REFERENCES `spotforca`.`categories` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `id_UNIQUE` ON `spotforca`.`words` (`id` ASC);

CREATE INDEX `fk_words_categories_idx` ON `spotforca`.`words` (`categories_id` ASC);


-- -----------------------------------------------------
-- Table `spotforca`.`rounds`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spotforca`.`rounds` ;

CREATE TABLE IF NOT EXISTS `spotforca`.`rounds` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nickname` VARCHAR(45) NULL,
  `hash` VARCHAR(100) NULL,
  `score` INT NULL,
  `status` INT NULL DEFAULT 1,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `id_UNIQUE` ON `spotforca`.`rounds` (`id` ASC);


-- -----------------------------------------------------
-- Table `spotforca`.`challenges`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spotforca`.`challenges` ;

CREATE TABLE IF NOT EXISTS `spotforca`.`challenges` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `value` VARCHAR(100) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `id_UNIQUE` ON `spotforca`.`challenges` (`id` ASC);


-- -----------------------------------------------------
-- Table `spotforca`.`answers`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spotforca`.`answers` ;

CREATE TABLE IF NOT EXISTS `spotforca`.`answers` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `value` VARCHAR(45) NULL,
  `right` TINYINT(1) NULL DEFAULT 0,
  `challenges_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id`, `challenges_id`),
  CONSTRAINT `fk_answers_challenges1`
    FOREIGN KEY (`challenges_id`)
    REFERENCES `spotforca`.`challenges` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `id_UNIQUE` ON `spotforca`.`answers` (`id` ASC);

CREATE INDEX `fk_answers_challenges1_idx` ON `spotforca`.`answers` (`challenges_id` ASC);


-- -----------------------------------------------------
-- Table `spotforca`.`credencials`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `spotforca`.`credencials` ;

CREATE TABLE IF NOT EXISTS `spotforca`.`credencials` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `userId` INT NULL DEFAULT 1,
  `authorization` VARCHAR(100) NULL,
  `isValid` TINYINT(1) NULL DEFAULT 1,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `id_UNIQUE` ON `spotforca`.`credencials` (`id` ASC);


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `spotforca`.`categories`
-- -----------------------------------------------------
START TRANSACTION;
USE `spotforca`;
INSERT INTO `spotforca`.`categories` (`id`, `name`) VALUES (1, 'rock');
INSERT INTO `spotforca`.`categories` (`id`, `name`) VALUES (2, 'sertanejo');

COMMIT;


-- -----------------------------------------------------
-- Data for table `spotforca`.`words`
-- -----------------------------------------------------
START TRANSACTION;
USE `spotforca`;
INSERT INTO `spotforca`.`words` (`id`, `name`, `categories_id`) VALUES (1, 'guns', 1);
INSERT INTO `spotforca`.`words` (`id`, `name`, `categories_id`) VALUES (2, 'slash', 1);
INSERT INTO `spotforca`.`words` (`id`, `name`, `categories_id`) VALUES (3, 'luan', 2);
INSERT INTO `spotforca`.`words` (`id`, `name`, `categories_id`) VALUES (4, 'matheus', 2);

COMMIT;


-- -----------------------------------------------------
-- Data for table `spotforca`.`challenges`
-- -----------------------------------------------------
START TRANSACTION;
USE `spotforca`;
INSERT INTO `spotforca`.`challenges` (`id`, `value`) VALUES (1, 'O ultimo albun de Guns n roses foi no ano de 1993?');
INSERT INTO `spotforca`.`challenges` (`id`, `value`) VALUES (2, 'Luan Santana tem 13 albuns no total?');

COMMIT;


-- -----------------------------------------------------
-- Data for table `spotforca`.`answers`
-- -----------------------------------------------------
START TRANSACTION;
USE `spotforca`;
INSERT INTO `spotforca`.`answers` (`id`, `value`, `right`, `challenges_id`) VALUES (1, 'Sim', false, 1);
INSERT INTO `spotforca`.`answers` (`id`, `value`, `right`, `challenges_id`) VALUES (2, 'Não', true, 1);
INSERT INTO `spotforca`.`answers` (`id`, `value`, `right`, `challenges_id`) VALUES (3, 'Sim', true, 2);
INSERT INTO `spotforca`.`answers` (`id`, `value`, `right`, `challenges_id`) VALUES (4, 'Não', false, 2);

COMMIT;

